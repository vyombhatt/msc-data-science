-- Import the JAR file before proceeding with the analysis
ADD JAR /opt/cloudera/parcels/CDH/lib/hive/lib/hive-hcatalog-core-1.1.0-cdh5.11.2.jar;

-- Firstly. let's create the database with the name vyom
create database if not exists vyom;

-- Let's first check what data does the file in the HDFS location goven contains
-- Let's do this by loading all of the data in 1 column to make sense of it

drop table if exists vyom.assignment_data_check;
create external table vyom.assignment_data_check (
col1	string) row format delimited fields terminated by '|'
location '/common_folder/nyc_taxi_data/';

select * from vyom.assignment_data_check limit 10;

-- The very first column has the name of the columns (which we can use to define the schema of the table), also the fields are comma separated
-- Let's now create an external table with the defined schema
-- Also taking care of the different data types for each column based on the column description, and assigning the first column as column names

drop table if exists vyom.assignment_nyc_taxi_data;
create external table vyom.assignment_nyc_taxi_data (
VendorID int,
tpep_pickup_datetime timestamp,
tpep_dropoff_datetime timestamp,
passenger_count int,
trip_distance double,
RatecodeID int,
store_and_fwd_flag string,
PULocationID int,
DOLocationID int,
payment_type int,
fare_amount double,
extra double,
mta_tax double,
tip_amount double,
tolls_amount double,
improvement_surcharge double,
total_amount double) row format delimited fields terminated by ','
location '/common_folder/nyc_taxi_data/'
tblproperties ("skip.header.line.count"="1");

select * from vyom.assignment_nyc_taxi_data limit 10;

-- checking the total count of records in the table
select count(*) from vyom.assignment_nyc_taxi_data;

-- We see that there are a total of 1,174,569 records in the table

-- Basic Data Quality Check
-- How many records has each TPEP provider provided?

select VendorID, count(*)
from vyom.assignment_nyc_taxi_data
group by VendorID;

-- The Creative Mobile Technologies (VendorID = 1) has provided 527,386 entries. The VeriFone Inc (VendorID = 2) has provided 647,183 entires

-- The data provided is for months November and December only. Check whether the data is consistent, and if not, identify the data quality issues. Mention all data quality issues
-- Let's check for all the data quality issues present in the data
-- Can you conclude which vendor is doing a bad job in providing the records using different columns of the dataset?


-- Checking the years and months that the data has been provided for

select VendorID, year(tpep_pickup_datetime) as pickup_year, month(tpep_pickup_datetime) as pickup_month, count(*) as records
from vyom.assignment_nyc_taxi_data
group by VendorID, year(tpep_pickup_datetime), month(tpep_pickup_datetime)
order by records desc;
-- We have 14 erroneous records for the pickup times for the years 2008, 2009, 2003 and 2018. There are also records for the month of Oct-2017
-- Vendor 2 (VeriFone Inc) was the one that provided all the erroneous values here

-- Checking the records by passenger counts 

select VendorID, passenger_count, count(*) 
from vyom.assignment_nyc_taxi_data 
group by VendorID, passenger_count 
order by passenger_count;
-- We have 6824 records with 0 passenger counts out of which 6813 of those records were provided by Vendor 1

-- Checking the records by trip distance 

select VendorID, trip_distance, count(*) 
from vyom.assignment_nyc_taxi_data 
group by VendorID, trip_distance 
order by trip_distance;
-- We have 7402 records with 0 distance covered in the trip
-- Vendor 1 provided 4217 such erroneous values and Vendor 2 provided 3185 of these erroneous values

-- Looking at the fare_amount records 

select fare_amount, count(*) 
from vyom.assignment_nyc_taxi_data 
group by fare_amount 
order by fare_amount; 
-- We observe that there are records with negative values for fare amounts. Let's get the count of such records

select VendorID, count(*)
from vyom.assignment_nyc_taxi_data 
where fare_amount < 0
group by VendorID;
-- There are 558 records have negative values for fare amounts, and all these erronous values have been provided by Vendor 2

-- Looking at the extra records 

select extra, count(*) 
from vyom.assignment_nyc_taxi_data 
group by extra 
order by extra ;
-- We know that extra column can take only values - 0, 0.5 or 1.00. Let's get the count of the erroneous records

select VendorID, count(*)
from vyom.assignment_nyc_taxi_data 
where extra not in (0, 0.5, 1.0)
group by VendorID
order by VendorID;
-- Vendor 1 returned 1823 erroneous values for the extra column, whereas Vendor 2 returned 3033 erroneous values

-- Looking at the mta_tax records 

select mta_tax, count(*) 
from vyom.assignment_nyc_taxi_data 
group by mta_tax 
order by mta_tax ;
-- We know that mta_tax column can take only values - 0, 0.5. Let's get the count of the erroneous records

select VendorID, count(*)
from vyom.assignment_nyc_taxi_data 
where mta_tax not in (0,0.5)
group by VendorID
order by VendorID;
-- We can see that there are 547 erroneous records for mta_tax provided by Vendor 1 and 1 such erroneous value provided by Vendor 1

-- Looking at the tip_amount records 

select tip_amount, count(*) 
from vyom.assignment_nyc_taxi_data 
group by tip_amount 
order by tip_amount;  
-- We observe that there are records with negative values for tip_amount. Let's get the count of such records

select VendorID, count(*)
from vyom.assignment_nyc_taxi_data 
where tip_amount < 0
group by VendorID;
-- Looking at the distribution, we can see that there are around 4 records with negative values for tip_amount, all of which are provided by Vendor 2

-- Looking at the tolls_amount records 

select tolls_amount, count(*) 
from vyom.assignment_nyc_taxi_data 
group by tolls_amount 
order by tolls_amount ;
-- We observe that there are records with negative values for tolls_amount. Let's get the count of such records

select VendorID, count(*)
from vyom.assignment_nyc_taxi_data 
where tolls_amount < 0
group by VendorID;
-- Looking at the distribution, we can see that there are around 3 records with negative values for tolls_amount, all of which are provided by Vendor 2

-- Looking at the improvement_surcharge records 

select improvement_surcharge, count(*) 
from vyom.assignment_nyc_taxi_data 
group by improvement_surcharge 
order by improvement_surcharge ;
-- We know that improvement_surcharge column can take only values - 0, 0.3. Let's get the count of the erroneous records

select VendorID, count(*)
from vyom.assignment_nyc_taxi_data 
where improvement_surcharge not in (0,0.3)
group by VendorID
order by VendorID;
-- We observe that there are 562 records with erroneous values for improvement_surcharge, all of which are provided by Vendor 2

-- Looking at the total_amount records 

select total_amount, count(*) 
from vyom.assignment_nyc_taxi_data 
group by total_amount 
order by total_amount;
-- We observe that there are records with negative values for total_amount. Let's get the count of such records

select VendorID, count(*)
from vyom.assignment_nyc_taxi_data 
where total_amount < 0
group by VendorID;
-- Over 558 records have negative values for total_amount, all of which are provided by Vendor 2

-- Highlighting all the issues that are there in the dataset:
-- 1. There are 14 erroneous records for the pickup times for the years 2008, 2009, 2003 and 2018. There are also records for the month of Oct - 2017. Vendor 2 (VeriFone Inc) was the one that provided all the erroneous values here
-- 2. We have 6824 records with 0 passenger counts out of which 6813 of those records were provided by Vendor 1
-- 3. We have 7402 records with 0 distance covered in the trip. Vendor 1 provided 4217 such erroneous values and Vendor 2 provided 3185 of these erroneous values
-- 4. There are 558 records have negative values for fare amounts, and all these erronous values have been provided by Vendor 2
-- 5. Vendor 1 returned 1823 erroneous values for the extra column, whereas Vendor 2 returned 3033 erroneous values
-- 6. We can see that there are 547 erroneous records for mta_tax provided by Vendor 1 and 1 such erroneous value provided by Vendor 1
-- 7. There are 4 records with negative values for tip_amount, all of which are provided by Vendor 2
-- 8. There are around 3 records with negative values for tolls_amount, all of which are provided by Vendor 2
-- 9. There are 562 records with erroneous values for improvement_surcharge, all of which are provided by Vendor 2
-- 10. There are 558 records have negative values for total_amount, all of which are provided by Vendor 2

-- Can you conclude which vendor is doing a bad job in providing the records using different columns of the dataset?
-- We see that Vendor 2 (VeriFone Inc), as mentioned in the points listed above, has provided erroneous values for a verly large number of columns, as compared to Vendor 1 (Creative Mobile Technologies)


-- Let's exclude all of these values from the dataset to ensure we have a clean, ORC partitioned table for analysis

-- I've made the following assumptions based on which the cleaned dataset will be created:
-- 1. Since we need to look at the data for November and December - I'll be considering the 'pickup times' for the trips and only the trips that have pickup times lying in this period will be considered.
-- 2. All the trips that have 0 (and less than 0) distance covered will be removed.
-- 3. All trips where the fare amount and total amount is less than or equal to 0 will be removed.
-- 4. All the trips which have 0 passangers onboard will be omitted.
-- 5. All the trips that have any of the amount related metrics or distance travelled less than 0 will be removed.
-- 6. All other erronous records that were identified in the data quality check done above will be omitted.

-- Firstly, we'll partition the data
-- Before partitioning, let's run the following commands 
SET hive.exec.max.dynamic.partitions=100000;
SET hive.exec.max.dynamic.partitions.pernode=100000;

-- Let's also add the JAR file again
ADD JAR /opt/cloudera/parcels/CDH/lib/hive/lib/hive-hcatalog-core-1.1.0-cdh5.11.2.jar;

-- Create the ORC partitioned table 
drop table if exists vyom.assignment_nyc_taxi_cleaned_orc;
create table vyom.assignment_nyc_taxi_cleaned_orc (
VendorID int,
tpep_pickup_datetime timestamp,
tpep_dropoff_datetime timestamp,
passenger_count int,
trip_distance double,
RatecodeID int,
store_and_fwd_flag string,
PULocationID int,
DOLocationID int,
payment_type int,
fare_amount double,
extra double,
mta_tax double,
tip_amount double,
tolls_amount double,
improvement_surcharge double,
total_amount double) partitioned by (year_part int, month_part int, day_part int)
stored as orc location '/user/hive/warehouse/vyom_assigment_nyc_taxi_orc'
tblproperties ("orc.compress"="SNAPPY");

-- Insert data into the ORC partitioned table
insert overwrite table vyom.assignment_nyc_taxi_cleaned_orc partition (year_part , month_part, day_part)
select VendorID, tpep_pickup_datetime, tpep_dropoff_datetime, passenger_count, trip_distance, RatecodeID, store_and_fwd_flag, PULocationID, DOLocationID, payment_type,
fare_amount, extra, mta_tax, tip_amount, tolls_amount, improvement_surcharge, total_amount, year(tpep_pickup_datetime) as year_part, month(tpep_pickup_datetime) as month_part,
day(tpep_pickup_datetime) as day_part
from  vyom.assignment_nyc_taxi_data
where (year(tpep_pickup_datetime) = 2017 and month (tpep_pickup_datetime) in (11, 12))
and passenger_count > 0
and trip_distance > 0
and fare_amount > 0
and extra in (0,0.5,1)
and mta_tax in (0,0.5)
and tip_amount >= 0
and tolls_amount >= 0
and improvement_surcharge in (0,0.3)
and total_amount > 0;

-- Let's check the count of records we have in the new table
select count(*) from vyom.assignment_nyc_taxi_cleaned_orc ;
-- We have our final cleaned table with 1,155,423 number of records

--Let's check the number of partitions created
show partitions vyom.assignment_nyc_taxi_cleaned_orc ;
-- we have data for the last 2 months of 2017, partitioned at a year, month, day level

-- Analysis-I

-- 1. Compare the overall average fare per trip for November and December.
-- 2. Explore the ‘number of passengers per trip’ - how many trips are made by each level of ‘Passenger_count’? Do most people travel solo or with other people?
-- 3. Which is the most preferred mode of payment?
-- 4. What is the average tip paid per trip? Compare the average tip with the 25th, 50th and 75th percentiles and comment whether the ‘average tip’ 
-- is a representative statistic (of the central tendency) of ‘tip amount paid’. 
-- Hint: You may use percentile_approx(DOUBLE col, p): Returns an approximate pth percentile of a numeric column (including floating point types) in the group.
-- 5. Explore the ‘Extra’ (charge) variable - what fraction of total trips have an extra charge is levied? 

-- Compare the overall average fare per trip for November and December.

select month(tpep_pickup_datetime) as pickup_month, round(avg(fare_amount),2) as avg_fare_per_trip
from vyom.assignment_nyc_taxi_cleaned_orc
group by month(tpep_pickup_datetime)
order by pickup_month;
- Looking at just the fare amounts, Average fare amount for November was 12.91 whereas for December it was 12.71

select month(tpep_pickup_datetime) as pickup_month, round(avg(total_amount),2) as avg_fare_per_trip
from vyom.assignment_nyc_taxi_cleaned_orc
group by month(tpep_pickup_datetime)
order by pickup_month;
- Looking at the total amount that was charged to the customer, the average for November was 16.20 and for December it was 15.90


-- Explore the ‘number of passengers per trip’

select passenger_count, count(*) as trip_count
from vyom.assignment_nyc_taxi_cleaned_orc
group by passenger_count
order by passenger_count;
-- We observe that the largest majority of customers preferred to travel Solo. The split for the passangers per trip is as follows (passenger count - count of trips made)
-- 1:818469, 2:174980, 3:50236, 4:24704, 5:54111, 6:32920, 7:3


-- Which is the most preferred mode of payment?

select payment_type, count(*) as trip_count
from vyom.assignment_nyc_taxi_cleaned_orc
group by payment_type
order by trip_count desc;
-- We observe that the the most preferred mode of payment is using Credit Cards. The split for the payment modes by count of trips is as follows:
-- (payment mode:count of trips made) Credit Cards (1):779809, Cash (2)-369549, No Charge (3)-4746, Dispute (4)-1319


--What is the average tip paid per trip? Compare the average tip with the 25th, 50th and 75th percentiles and comment whether the ‘average tip’ is a representative statistic (of the central tendency) of ‘tip amount paid’. */

select round(avg(tip_amount),2) as average_tip, percentile_approx(tip_amount, 0.25) as 25thpercentile, percentile_approx(tip_amount, 0.50) as 50thpercentile, 
percentile_approx(tip_amount, 0.75) as 75thpercentile
from vyom.assignment_nyc_taxi_cleaned_orc;
-- We see that the average tip amount = 1.83, 25th percentile = 0, 50th percentile = 1.36, 75th percentile = 2.45
-- Hence the average tip amount is not representative of the central tendency as it lies more towards the second half of the distribution rather than the centre

-- Explore the ‘Extra’ (charge) variable - what fraction of total trips have an extra charge is levied?

select round(trips_extra_levied/total_trips, 2) as fraction_of_trips_extra_levied
from (
select sum(case when extra > 0 then 1 else 0 end) as trips_extra_levied, count(*) as total_trips
from vyom.assignment_nyc_taxi_cleaned_orc ) a;
-- We see that 46% of the total trips have an extra charge levied 

-- Analysis-II

-- 1. What is the correlation between the number of passengers on any given trip, and the tip paid per trip? 
-- Do multiple travellers tip more compared to solo travellers? Hint: Use CORR(Col_1, Col_2)
-- 2. Segregate the data into five segments of ‘tip paid’: [0-5), [5-10), [10-15) , [15-20) and >=20. 
-- Calculate the percentage share of each bucket (i.e. the fraction of trips falling in each bucket).
-- 3. Which month has a greater average ‘speed’ - November or December? 
-- Note that the variable ‘speed’ will have to be derived from other metrics. Hint: You have columns for distance and time.
-- 4. Analyse the average speed of the most happening days of the year, i.e. 31st December (New year’s eve) and 25th December (Christmas) and compare it with the overall average.

-- What is the correlation between the number of passengers on any given trip, and the tip paid per trip?

select round(corr(passenger_count, tip_amount), 4)
from vyom.assignment_nyc_taxi_cleaned_orc;
-- there is no significant correlation between the count of passangers per trip and tip amount paid. Corr = -0.0054
-- Hence we cannot say for sure whether multiple travellers tip more compared to solo travellers


-- Segregate the data into five segments of ‘tip paid’: [0-5), [5-10), [10-15) , [15-20) and >=20. Calculate the percentage share of each bucket

select tip_amount_bucket, round(count(*)* 100.0/ sum(count(*)) over (), 2) as share_of_trips
from (
select case
			when tip_amount <  5 then '1. Tip Paid 0-5'
			when tip_amount >= 5 and tip_amount < 10 then '2. Tip Paid 5-10'
			when tip_amount >= 10 and tip_amount < 15 then '3. Tip Paid 10-15'
			when tip_amount >= 15 and tip_amount < 20 then '4. Tip Paid 15-20'
			else '5. Tip Paid >=20' end as tip_amount_bucket, *
from vyom.assignment_nyc_taxi_cleaned_orc) a
group by tip_amount_bucket
order by tip_amount_bucket;

-- the percentage share of each of the 5 segments is as follows:
-- [0-5) = 92.39%, [5-10) = 5.64%, [10-15) = 1.70% , [15-20) = 0.19% and >=20 = 0.09%


-- Which month has a greater average ‘speed’ - November or December?
-- In order to derive average speed, we'll first take the difference between the pickup time and drop time in hours. Then perform distance travelled (in miles)/ time taken (in hours)
-- The speed therefore will be in miles per hour (mph)

select month_part, round(sum(trip_distance)/sum((unix_timestamp(tpep_dropoff_datetime) - unix_timestamp(tpep_pickup_datetime))/3600),2) as avg_speed_mph
from vyom.assignment_nyc_taxi_cleaned_orc 
group by month_part
order by month_part;
-- From the above, we see that the average speed in November was 9.10 mph (miles per hour) whereas for December it was 9.74 mph. 
--Hence December had the greater average speed

-- Analyse the average speed of the most happening days of the year, i.e. 31st December (New year’s eve) and 25th December (Christmas) and compare it with the overall average.

-- First let's find the average speed across the 2 months
select round(sum(trip_distance)/sum((unix_timestamp(tpep_dropoff_datetime) - unix_timestamp(tpep_pickup_datetime))/3600),2) as avg_speed_mph
from vyom.assignment_nyc_taxi_cleaned_orc ;
-- The overall average speed across the 2 months is 9.41

-- Now, let's calculate the average speeds on the 2 special days mentioned of New Year's Eve and Christmas

select to_date(tpep_pickup_datetime) as pickup_date, 
round(sum(trip_distance)/sum((unix_timestamp(tpep_dropoff_datetime) - unix_timestamp(tpep_pickup_datetime))/3600),2) as avg_speed_mph
from vyom.assignment_nyc_taxi_cleaned_orc 
where month_part = 12
and day_part in (25,31)
group by to_date(tpep_pickup_datetime)
order by pickup_date;
-- The average speed on Christmas is 12.23 mph, and New Year's Eve is 11.68 mph. 
-- The average speeds on both these days is greater than the overall average speed of both the months combined, and the average of the individual months too!


